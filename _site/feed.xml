<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/PersonalPortfolioWebsite/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/PersonalPortfolioWebsite/" rel="alternate" type="text/html" /><updated>2023-11-17T22:23:55-08:00</updated><id>http://localhost:4000/PersonalPortfolioWebsite/feed.xml</id><title type="html">codebyfrank</title><subtitle>this is a website to show off different personal projects and to keep the creativity flowing</subtitle><entry><title type="html">seeing the pros and cons of two approaches - recursion and iteration</title><link href="http://localhost:4000/PersonalPortfolioWebsite/data%20structures%20and%20algorithms/2023/10/23/recursion-versus-iteration.html" rel="alternate" type="text/html" title="seeing the pros and cons of two approaches - recursion and iteration" /><published>2023-10-23T00:00:00-07:00</published><updated>2023-10-23T00:00:00-07:00</updated><id>http://localhost:4000/PersonalPortfolioWebsite/data%20structures%20and%20algorithms/2023/10/23/recursion-versus-iteration</id><content type="html" xml:base="http://localhost:4000/PersonalPortfolioWebsite/data%20structures%20and%20algorithms/2023/10/23/recursion-versus-iteration.html">&lt;p&gt;The first time i compared two different approaches in problem solving within the domain of computer science, it was looking at the fibonacci sequence and making a program which would generate a sequence of numbers that fulfill a set of conditions.  Here are the conditions:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. The first number is 1
2. The current number is the sum of the previous two numbers
3. All numbers are integers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The idea behind the exercise was to demonstrate the differences in performance between different approaches to solving a particular problem.  For the Fibonacci sequence, it turns out that iteration was able to return sequences far beyond the limit of the program which used recursion.  However, I want to explore the different trade-offs between recursion and iteration.  With recursion, it is usually assumed to be a more elegant approach to problem solving compared to iteration.  When maintaining one’s own stack, readability becomes key in the long term.  However, there are downsides to using recursion such as a larger amount of memory possibly being used or a less intuitive approach to solving the problem.  At the foundation of this is the difference between a top-down and bottom-up approach in designing algorithms.
In order to make this comparison, I will use Python to set up and compare the different approaches.  There will not be any differences as far as environment goes, they will be compiled in the same environment.  All things constant, the hope is to see obvious differences between iteration and recursion and have a better understanding of when to take whichever approach.&lt;/p&gt;

&lt;h3 id=&quot;fibonacci-number&quot;&gt;fibonacci number&lt;/h3&gt;
&lt;p&gt;The first problem to present an opportunity to compare the two approaches is the Fibonacci number.  It is a simple problem where you are to build a list of numbers where current element’s value is the sum of the previous two elements in the list.  An example of a fibonacci number is:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1, 1, 2, 3, 5, 8, 13, ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and the fibonacci number is the sum of all the elements in the list.  The problem could be approached by building the list top down through recursion or bottom up through iteration.  First, in order to have a better understanding of how each of these programs are going to function, it would be better to have pseudocode so that less energy is spent on carving the logic of the program out and more is spent on simply expressing the idea.&lt;/p&gt;

&lt;h4 id=&quot;pseudocode-recursion&quot;&gt;pseudocode: recursion&lt;/h4&gt;
&lt;p&gt;The first task in setting up a recursive solution for printing out a list of fibonacci numbers is finding the base case.  In the case of the fibonacci number, the base case would be when the parameter is either 0 or 1.  This is because if we are to print n-amount of numbers, if n = 0 or if n = 1, then the number would just be the number.  So for starting out, we have a base case where:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;f(0) = 0
f(1) = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The next step would be to establish some kind of relationship between the function and the parameter.  This very crucial step in being able to derive the recurrence relation, which is what you’re pseudocode is going to be based off of.  The recurrence relation for the fibonacci number is:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;F(n) = F(n-1) + F(n-2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once you have the recurrence relation, you can then be able to write out some pseudocode to make the process of typing out your code a lot simpler:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function(integer n):
    return n if n = 0 or n = 1
    return f(n-1) + f(n-2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;code-recursion&quot;&gt;code: recursion&lt;/h4&gt;
&lt;p&gt;After you have the pseudocode, typing the actual code wouldn’t be too hard. Translation when it comes to the recursion pseudocode is very straightforward:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def recursive_fibonacci(n):
    if n &amp;lt; 2:
        return n
    else:
        return recursive_fibonacci(n-1) + recursive_fibonacci(n-2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see, taking pseudocode and turning it into real code is fairly straightforward when it comes to recursion.&lt;/p&gt;

&lt;h4 id=&quot;pseudocode-iteration&quot;&gt;pseudocode: iteration&lt;/h4&gt;
&lt;p&gt;As you saw, recursion has a more familiar feel to how we would approach a problem such as fibonacci.  My data structures professor described recursion as a fairly intuitive approach to designing various algorithms to solve complex problems.  However, as intuitive as recursion is, there are other ways to get n amount of fibonacci numbers.  Another alternative to recursion is iteration, which if you are familiar with programming concepts, can be expressed in the form of a for or while loop.&lt;/p&gt;

&lt;p&gt;As previously mentioned, the pseudocode for the iterative solution to fibonacci numbers is not as straightforward as the two step process to build the recursive solution.  While the recursive solution starts from the top (n) and works down to f(0), iteration works in a different way where one starts from 1 and works up to n.  As such, the most appropriate way to start would be to initiate a variable which will store the sum.  After the variable is started at 1, a loop should be initialized and the loop should go n-1 iterations.  On each iteration, we will add the value from the previous iteration and the one prior to the running sum.  This is what the pseudocode would look like:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function(integer n):
    before variable = 1     // represents f(n-1)
    previous variable = 0   // represents f(n-2)
    current variable = 1    // represents running sum
    start loop @ 1 -&amp;gt; n:
        previous variable = before variable
        before variable = previous variable
        current variable = previous variable + before variable
    return current variable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;code-iteration&quot;&gt;code: iteration&lt;/h4&gt;
&lt;p&gt;As far as building a function in Python, the translation is not as straightforward as recursion but it does preserve most of its main structure.  The code is similar and is probably a little more condensed than the pseudocode because of the features that Python has to offer as an interpreted language.  The iterative function looks as follows:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def iter_funct(n):
    prev, curr = 0, 1
    for i in range(n):
        prev, curr = curr, prev + curr
    return prev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Like the pseudocode, the function uses the running sum to track the fibonacci sequence as the loop is executing.  The three steps shown are condensed into one single line within the loop.  Python is quite well known for allowing programmers to produce code that is condensed, yet readable to the human.&lt;/p&gt;

&lt;h3 id=&quot;coin-change-problem&quot;&gt;coin change problem&lt;/h3&gt;

&lt;h3 id=&quot;merge-sort-implementation&quot;&gt;merge sort implementation&lt;/h3&gt;

&lt;h3 id=&quot;walkingtraversing-trees&quot;&gt;walking/traversing trees&lt;/h3&gt;</content><author><name></name></author><category term="Data structures and Algorithms" /><summary type="html">The first time i compared two different approaches in problem solving within the domain of computer science, it was looking at the fibonacci sequence and making a program which would generate a sequence of numbers that fulfill a set of conditions. Here are the conditions:</summary></entry><entry><title type="html">building then using a singly-linked list</title><link href="http://localhost:4000/PersonalPortfolioWebsite/data%20structures%20and%20algorithms/2023/10/08/linked-list.html" rel="alternate" type="text/html" title="building then using a singly-linked list" /><published>2023-10-08T00:00:00-07:00</published><updated>2023-10-08T00:00:00-07:00</updated><id>http://localhost:4000/PersonalPortfolioWebsite/data%20structures%20and%20algorithms/2023/10/08/linked-list</id><content type="html" xml:base="http://localhost:4000/PersonalPortfolioWebsite/data%20structures%20and%20algorithms/2023/10/08/linked-list.html">&lt;p&gt;One of the first problems that I encountered in my introduction to computer programming class was trying to add another element to an array which was already full.  This caused the compiler to print an error message.  At the time, I worked around the issue by replacing the full array with an array which was double the size and move all the elements over from the smaller, old array to the larger array.  However, my professor mentioned that after a while, the array will become too large and copying the elements would be much slower than adding the elements to something that wasn’t fixed in size.  This is when they introduced the data structure, the singly-linked list.  So today, I was thinking of building a singly-linked list and using the list to build travel iterneraries.  Hopefully, by the end of this, singly-linked lists will be a lot more easier to navigate.&lt;/p&gt;

&lt;h3 id=&quot;singly-linked-list-background&quot;&gt;singly-linked list background&lt;/h3&gt;
&lt;p&gt;Unlike the first data structure that most programmers get introduced to, linked lists consists of two components.  A node and a pointer which allows for the next element to be accessed from the current one.  These pointers allow for iteration through the list and also allows for the list to grow or extend in length.  Arrays are introduced as data structures with a fixed or ‘static’ length.  The linked list, with the pointer, is of ‘dynamic’ length.  This means that linked lists can grow in length after the list is initialized.&lt;/p&gt;

&lt;p&gt;In order to build the linked list, the first element of the linked list to inspect is the node.  This is the element which will hold the data, along with the pointer which makes the appending and iteration possible.  So to have a better image of what a node is structurally, I provided a little snippet to help with building the singly-list list.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;listElement node:
    data        // the data which the list element will hold
    next node   // the pointer to the next node
node head       // the head of the node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To complete the singly linked list, we also have to understand what operations are going to be performed by the data structure.  A basic singly linked list has at least four different operations (add, remove, peek, display).&lt;/p&gt;

&lt;h4 id=&quot;operation-add&quot;&gt;operation: add()&lt;/h4&gt;
&lt;p&gt;The add operation is supposed to take a user’s input and then append the data to the list.  One of the most important things to consider is exactly what the pointer is referring to.  Under the hood, the linked list is linked through a series of pointers which link the different memory adresses together.  This is exactly why the linked list is able to continue appending and growing, unlike the array which is a series of memory addresses that are located next to each other.&lt;/p&gt;

&lt;p&gt;In order for the add operation to work, the first step of the function is to check the list’s head for any elements.  If the head is empty, then the head is assigned the user’s input.  Otherwise, the user’s input is set to a temporary node which iterates down the list until the next pointer is empty.  The next node is then set to the temporary node and the temporary node becomes the new last node on the list.  Here is a rough draft to show the steps:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function add(user input):
    node temp.data = head                   // start the temporary node at the list head
    start loop until temp.next is empty:
        temp = temp.next                    // iterate down the list
    temp.next = new node(user input)        // set the new last node on the list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This would allow for the list to be able to expand by taking advantage of the pointers which are a part of each node.&lt;/p&gt;

&lt;h4 id=&quot;operation-remove&quot;&gt;operation: remove()&lt;/h4&gt;
&lt;p&gt;The remove operation is suppose to undo the effect of the add operation of the linked list.  There are a couple ways to implement the operation, whether it is by allowing the user to give the function the node to delete or by simply deleting the head node and setting the new head to the next node.  In this post, a basic remove() operation will be performed without any user input.  Instead of prompting the user for input, the remove() operation will remove the head and declare the following node as the new list head.  This will ease the basic operation for demonstration but adding the search and remove functionality will not be a hard addition.  This will most likely be a necessary addition when the singly linked list is being used to build something that could be used in everyday life.  The additional step would be checking the next node’s data to compare with the user’s input.  If it matches, the next steps would be to set the pointer’s reference to the node after the next.  And then, it would be safe to delete the next node.&lt;/p&gt;

&lt;p&gt;To remove a node on the singly linked list, it is as simple as deferencing the previous node from it and pointing it over to its next node.  To give a more accurate image:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Before:
    A -&amp;gt; B -&amp;gt; C -&amp;gt; D -&amp;gt;

After remove(B):
    A -&amp;gt; C -&amp;gt; D
         B (removed)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The idea is to “skip” the node that you would like to delete from the list.  This way, the pointers will refer to the correct memory addresses as another temporary node traverses down the list.&lt;/p&gt;

&lt;p&gt;This would be the steps for the removal of the head’s list:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function removeHead(node):
    check head (return blank if empty)
    set the temporary node
    set new head to next node
    remove temporary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To compare, the rough steps for the removal of a wanted node on the list would look like:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function searchAndRemove(user input):
    set an iterator node to the head
    start a loop:
        check if the next node matches data
        if yes:
            set the iterators pointer to the node after the next
            delete the next node
        if no:
            continue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will come in handy when we build the travel itinerary by allowing users to be able to delete cities that were unintentionally added.&lt;/p&gt;

&lt;h4 id=&quot;operation-peek&quot;&gt;operation: peek()&lt;/h4&gt;
&lt;p&gt;The next operation that is frequently used is the peek() operation.  The runtime of the operation would be constant.  peek() will return the head of the linked list.  This would be very easy to implement, as one would only have to check the head of the list, if the head is empty then the function should return an error code whereas if not, the head’s data would be returned.&lt;/p&gt;

&lt;h4 id=&quot;operation-display&quot;&gt;operation: display()&lt;/h4&gt;
&lt;p&gt;display()’s runtime is linear.  The purpose of display is to show the linked list’s contents.  This would be a necessary operation since user interaction would be virtually impossible without any possible way to see the node’s data.  The steps would be first, initialize a iterator and then allow the iterator to go through the list and print the node’s data to the console.  The rough steps of the display() operation looks like this:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function display():
    new node iterator = head
    start loop:
        print(iterator.data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;plan-of-execution-travel-itinerary&quot;&gt;plan of execution: travel itinerary&lt;/h3&gt;
&lt;p&gt;The first portion of the travel itinerary will be made of the singly-linked list that we just went over.  The program’s logic will contain the same operations as the examples that I went over:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;addCity()&lt;/li&gt;
  &lt;li&gt;leftCity()&lt;/li&gt;
  &lt;li&gt;deleteCity(city* user)&lt;/li&gt;
  &lt;li&gt;displayItinerary()&lt;/li&gt;
  &lt;li&gt;searchItinerary(string searchstring)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a couple differences between these operations and the example operations that I discussed previously.  The leftCity will implement the previously discussed head deletion of the list.  This is to emulate leaving one city and travelling to the next.  The deleteCity() function will implement the search then delete that was mentioned previously.  The other functions will generally work just like the example functions of the basic singly-linked list.&lt;/p&gt;

&lt;p&gt;I also am going to add a method to calculate the distance between the two different cities so that the distance between the two can be displayed.  The other challenge would also be having the method work for different cities.  The current plan is to have a .csv of the different cities in the world and the program would then query against the file and return the necessary attributes such as latitude and longtitude in order to calculate the distance.  This would be most of the features that I plan on implementing and I would consider this to be the core of the application.&lt;/p&gt;

&lt;p&gt;Starting from adding a city onto the itinerary, I am going to try to build a planner using the previous methods discussed along with a few other methods to add a couple more features to the list to improve the experience of using the list to build travel itineraries.  By adding a .csv to the program, I am hoping that range of what is covered by the list is expanded compared to building a list by hand.&lt;/p&gt;

&lt;h4 id=&quot;addcity-adding-a-city-to-the-itinerary&quot;&gt;addCity: adding a city to the itinerary&lt;/h4&gt;

&lt;h4 id=&quot;leftcity-leaving-a-city&quot;&gt;leftCity: leaving a city&lt;/h4&gt;

&lt;h4 id=&quot;deletecity-undoing-a-wrong-addition-to-the-list&quot;&gt;deleteCity: undoing a wrong addition to the list&lt;/h4&gt;

&lt;h4 id=&quot;displayitinerary-show-the-list-contents&quot;&gt;displayItinerary: show the list contents&lt;/h4&gt;

&lt;h4 id=&quot;searchitinerary-show-whether-a-city-is-on-the-itinerary&quot;&gt;searchItinerary: show whether a city is on the itinerary&lt;/h4&gt;

&lt;h4 id=&quot;calcdistance-calculate-the-distances&quot;&gt;calcDistance: calculate the distances&lt;/h4&gt;</content><author><name></name></author><category term="Data structures and Algorithms" /><summary type="html">One of the first problems that I encountered in my introduction to computer programming class was trying to add another element to an array which was already full. This caused the compiler to print an error message. At the time, I worked around the issue by replacing the full array with an array which was double the size and move all the elements over from the smaller, old array to the larger array. However, my professor mentioned that after a while, the array will become too large and copying the elements would be much slower than adding the elements to something that wasn’t fixed in size. This is when they introduced the data structure, the singly-linked list. So today, I was thinking of building a singly-linked list and using the list to build travel iterneraries. Hopefully, by the end of this, singly-linked lists will be a lot more easier to navigate.</summary></entry><entry><title type="html">welcome to codebyfrank!</title><link href="http://localhost:4000/PersonalPortfolioWebsite/miscellaneous/2023/10/05/introductory-post.html" rel="alternate" type="text/html" title="welcome to codebyfrank!" /><published>2023-10-05T00:00:00-07:00</published><updated>2023-10-05T00:00:00-07:00</updated><id>http://localhost:4000/PersonalPortfolioWebsite/miscellaneous/2023/10/05/introductory-post</id><content type="html" xml:base="http://localhost:4000/PersonalPortfolioWebsite/miscellaneous/2023/10/05/introductory-post.html">&lt;p&gt;Hello! Welcome to codebyfrank, where I plan on sharing different experiences and personal projects I take on.  I hope that I can inspire others to go out and build something amazing by showcasing my personal projects and showing my journey through the learning process.  Software development is one of those skills that normally has a steep learning curve.  By posting and sharing some of the problems and struggles that I encounter, I hope that it would inspire you to either come up with a better solution or that I piqued your interest in the area of software development.&lt;/p&gt;

&lt;p&gt;I am interested in a vast array of different subjects within the space of software development and it is my goal to use this as an opportunity to explore various topics such as:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- data structures and algorithms
- data science
- code deployment and automation (DevOps)
- development on linux/unix systems
- mathematics
- full stack web development
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;among others.  Hopefully this site does inspire somebody to take up development!&lt;/p&gt;</content><author><name></name></author><category term="Miscellaneous" /><summary type="html">Hello! Welcome to codebyfrank, where I plan on sharing different experiences and personal projects I take on. I hope that I can inspire others to go out and build something amazing by showcasing my personal projects and showing my journey through the learning process. Software development is one of those skills that normally has a steep learning curve. By posting and sharing some of the problems and struggles that I encounter, I hope that it would inspire you to either come up with a better solution or that I piqued your interest in the area of software development.</summary></entry></feed>